# Introducing necessary libraries
import torch
import torchvision
import torch.nn as nn
from utils import plot_image, plot_curve, one_hot
from Net import Net
from torch import optim
import time


# Device to GPU
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

# Define hyperparameter
batch_size = 512


# Dataset MNIST loading
train_loader = torch.utils.data.DataLoader(
    torchvision.datasets.MNIST('mnist_data', train=True, download=True,
                               transform=torchvision.transforms.Compose([
                                   torchvision.transforms.ToTensor(),
                                   # Normalize converts numbers between 0 and 1 to numbers around 0
                                   torchvision.transforms.Normalize((0.1307,), (0.3081,))
                               ])),
    batch_size=batch_size, shuffle=True)

test_loader = torch.utils.data.DataLoader(
    torchvision.datasets.MNIST('mnist_data/', train=False, download=True,
                               transform=torchvision.transforms.Compose([
                                   torchvision.transforms.ToTensor(),
                                   # Normalize converts numbers between 0 and 1 to numbers around 0
                                   torchvision.transforms.Normalize((0.1307,), (0.3081,))
                               ])),
    batch_size=batch_size, shuffle=True)

x, y = next(iter(train_loader))
print(x.shape, y.shape, x.min(), x.max())
plot_image(x, y, 'image sampe')

# Call Net() and deploy to GPU
net = Net().to(device)

# Define optimizer and loss function
optimizer = optim.SGD(net.parameters(), lr=0.01, momentum=0.9)
criterion = nn.CrossEntropyLoss()

train_loss = []
for epoch in range(11):
    for batch_idx, (x, y) in enumerate(train_loader)ï¼š
        start = time.perf_counter()
        # x: [ b, 1, 28, 28],y : [512]
        # [b, 1, 28, 28] => [b, 784]
        x = x.view(x.size(0), 28 * 28).to(device)
        # => [b, 10]
        out = net(x)
        # [b, 10]
        y_onehot = one_hot(y).to(device)
        # loss = cross_entropy(out, y_onehot)
        loss = criterion(out, y_onehot)
        # Initialize optimizer
        optimizer.zero_grad()
        loss.backward()
        # w' = w - lr*grad
        optimizer.step()

        train_loss.append(loss.item())

        end = time.perf_counter()
        runtime = end - start

        if batch_idx % 10 == 0:
            print(epoch, batch_idx, loss.item(), runtime)

plot_curve(train_loss)
# we get optimal [w1, b1, w2, b2, w3, b3]
total_correct = 0
for x, y in test_loader:
    x = x.view(x.size(0), 28 * 28).to(device)
    out = net(x)
    # out : [b, 10] => pred : [b]
    pred = out.argmax(dim=1)
    correct = pred.eq(y.to(device)).sum().float().item()
    total_correct += correct

total_num = len(test_loader.dataset)
acc = total_correct / total_num
print('test acc:', acc)

x, y = next(iter(test_loader))
out = net(x.view(x.size(0), 28 * 28).to(device))
pred = out.argmax(dim=1)
plot_image(x, pred, 'test')
